#在打开文件并按行读取打印时，为了避免print(line)以换行符结尾，导致文字的行与行之间有两个空行，可以采用end=' '结尾
file=open('read','r')
for line in file:
    print(line,end=' ')
######################################################################



#全局变量在函数内修改的时候，要先进行global申明，否则会被误认为在函数内重新定义了一个新的local变量。
x=88 #Global x
def func():
    global x
    x=99  #Global x ,outside def
    
func()
print(x)  #x=99
######################################################################


#在函数调用中，参数必须依此顺序出现：任何位置参数(value),后面跟着人和关键字参数(name=value)和*sequence 形式的组合，后面跟着**dict形式。
def __init__( self, name, *noxArgs, **kwargs ):
        """Init.
           name: name to give controller
           noxArgs: arguments (strings) to pass to NOX"""
        if not noxArgs:
            warn( 'warning: no NOX modules specified; '
                  'running packetdump only\n' )
            noxArgs = [ 'packetdump' ]
        elif type( noxArgs ) not in ( list, tuple ):
            noxArgs = [ noxArgs ]

        if 'NOX_CORE_DIR' not in os.environ:
            exit( 'exiting; please set missing NOX_CORE_DIR env var' )
        noxCoreDir = os.environ[ 'NOX_CORE_DIR' ]

        Controller.__init__( self, name,
                             command=noxCoreDir + '/nox_core',
                             cargs='--libdir=/usr/local/lib -v -i ptcp:%s ' +
                             ' '.join( noxArgs ),
                             cdir=noxCoreDir,
                             **kwargs )
参数匹配过程：
1.  通过位置分配非关键字参数
2.  通过匹配变量名分配关键字参数
3.  其他额外的非关键字参数分配到*name元祖中
4.  其他额外的关键字参数分配到**sequence字典中
5.  用默认值分配给在头部未得到分配的参数

######################################################################     


